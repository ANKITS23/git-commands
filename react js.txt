
1)<BrowserRouter>

A <Router> that uses the HTML5 history API (pushState, replaceState
 and the popstate event) to keep your UI in sync with the URL.

2)<HashRouter>
A <Router> that uses the hash portion of the URL (i.e. window.location.hash) to keep your UI in sync with the URL.


3)<Link>
Provides declarative, accessible navigation around your application.


4)<NavLink>
A special version of the <Link> that will add styling attributes to the rendered element when it matches the current URL.

5)<MemoryRouter>

A <Router> that keeps the history of your “URL” in memory (does not read or write to the address bar). Useful in tests and non-browser environments like React Native.<MemoryRouter
 
 initialEntries={optionalArray}
  initialIndex={optionalNumber}
  getUserConfirmation={optionalFunc}
  keyLength={optionalNumber}
>
  <App />
</MemoryRouter>


6) <Redirect>
Rendering a <Redirect> will navigate to a new location. The new location will override the current location in the history stack, like server-side redirects (HTTP 3xx) do.


<Redirect to="/somewhere/else" />

7)<Route>
The Route component is perhaps the most important component in React Router to understand and learn to use well. Its most basic responsibility is to render some UI when its path matches the current URL.

<Router>
    <div>
      <Route exact path="/">
        <Home />
      </Route>


8)  <Router>
The common low-level interface for all router components. Typically apps will use one of the high-level routers instead:
<BrowserRouter>
<HashRouter>
<MemoryRouter>
<NativeRouter>
<StaticRouter>





          [ React Js   JSX ]



[

 AbortedDeferredError, 
 Await,
 BrowserRouter, 
 Form,
 HashRouter, 
 Link,
 MemoryRouter,
 NavLink,
 Navigate,
 NavigationType,
 Outlet,
 Route, 
 Router,
 RouterProvider,
 Routes,
 ScrollRestoration, 

]

[

 UNSAFE_DataRouterContext, 
 UNSAFE_DataRouterStateContext, 
 UNSAFE_DataStaticRouterContext, 
 UNSAFE_LocationContext,
 UNSAFE_NavigationContext, 
 UNSAFE_RouteContext,
 UNSAFE_enhanceManualRouteObjects, 

]

{
 createBrowserRouter,
 createHashRouter,
 createMemoryRouter, 
 createPath, 
 createRoutesFromChildren,
 createRoutesFromElements,
 createSearchParams


}]


{
 defer, 
 generatePath,
 isRouteErrorResponse, 
 json,
 matchPath,
 matchRoutes,
 parsePath, 
 redirect,
 renderMatches,
 resolvePath,
 unstable_HistoryRouter

}



{
useActionData,
 useAsyncError,
 useAsyncValue,
 useFetcher,
 useFetchers, 
useFormAction,
useHref, 
useInRouterContext,
 useLinkClickHandler,
 useLoaderData,
 useLocation, 
useMatch,
 useMatches, 
useNavigate,
 useNavigation,
 useNavigationType, 
useOutlet, 
useOutletContext,
 useParams, 
useResolvedPath, 
useRevalidator,
 useRouteError,
useRouteLoaderData,
 useRoutes,
useSearchParams,
useSubmit,

}


props = constructor


class Square extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: null,
    };
  }

  render() {
    return (
      <button className="square" onClick={() => console.log('click')}>
        {this.props.value}
      </button>
    );
  }
}




















